--------------------------mt---------------------------
slip2

Create an Android Application that will change color of the screen and change the font size of text
view using xml.


xml file
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"xmlns:app="http://schemas.android.com/apk/res-auto"
xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
tools:context=".MainActivity">
<TextView
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:text="Welcome!"
android:id="@+id/tv"
/>
<Button
android:layout_width="wrap_content"
android:layout_height="wrap_content"
android:id="@+id/btn"
android:text="Change text size and background color" />
</LinearLayout>


java file
package com.example.mychangebackground;
import androidx.appcompat.app.AppCompatActivity;
import android.graphics.Color;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
public class MainActivity extends AppCompatActivity {
Button btn;
TextView tv;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
btn = (Button) findViewById(R.id.btn);
tv = (TextView) findViewById(R.id.tv);
btn.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View view) {
tv.setTextSize(30);changeScreenColor(Color.RED);
}
});
}
public void changeScreenColor(int c){
View v = this.getWindow().getDecorView();
v.setBackgroundColor(c);
}
}









--------------------------Os--------------------------------

slip 2

Write a C program that a string as an argument and return all the files that begins with that name in
the current directory. For example > ./a.out foo will return all file names that begins with foo.[

#include<stdio.h>
#include<stdlib.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<string.h>
#include<dirent.h>
int main(int argc,char *argv[])
{
DIR *d;
struct dirent *dr;
char s[50],s1[50];
if(argc<2)
{
printf("insufficient argument enterb string on command line");
exit(0);
}
d=opendir(".");
while((dr=readdir(d))!=NULL)
{
strncpy(s,dr->d_name,strlen(argv[1]));
if(strcmp(s,argv[1])==0)
printf("%s\n",dr->d_name);
}
return 0;
}

compile then run ./a.out with file name in command line eg ./a.out xyz

or use this code

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>
#include <string.h>

int main(int argc, char *argv[]) {
    DIR *dir;
    struct dirent *entry;

    if (argc < 2) {
        printf("Error: No search string provided.\n");
        return 1;
    }

    dir = opendir(".");
    if (dir == NULL) {
        printf("Error: Failed to open directory.\n");
        return 1;
    }

    while ((entry = readdir(dir)) != NULL) {
        if (strncmp(entry->d_name, argv[1], strlen(argv[1])) == 0) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
    return 0;
}



Write a C program to demonstrates the different behavior that can be seen with automatic,
global, register, static and volatile variables (Use setjmp() and longjmp() system call).

#include<stdio.h>
#include<stdlib.h>
#include<unistd.h>
#include<fcntl.h>
#include<sys/stat.h>
#include<sys/types.h>
#include<setjmp.h>
static void f1(int,int,int,int);
static void f2();
static int gint;
static jmp_buf jmp;
int main()
{

int aint;
register int rint;
volatile int vint;
static int sint;
gint=1;	aint=2;	rint=3;	vint=4;	sint=5;
if(setjmp(jmp)!=0)
{
printf("\nAfter Long jump=>");
printf("\ngint=%d\taint=%d\trint=%d\tvint=%d\tsint=%d",gint,aint,rint,vint,sint);
exit(0);
}
printf("\n updating values");
gint=91;	aint=92;	rint=93;	vint=94;	sint=95;
f1(aint,rint,vint,sint);
return 0;
}
static void f1(int a,int b,int c,int d)
{
printf("\n in f1=>");
printf("\ngint=%d\taint=%d\trint=%d\tvint=%d\tsint=%d",gint,a,b,c,d);
f2();
}
static void f2()
{
longjmp(jmp,1);
}
simple compile and run


