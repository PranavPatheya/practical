--------------------------------mt---------------------------
slip 10

Create a satellite view of current location using google map.
androidManifest.xml

xml

<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
package="com.example.map">
<application
android:allowBackup="true"
android:icon="@mipmap/ic_launcher"
android:label="@string/app_name"
android:roundIcon="@mipmap/ic_launcher_round"
android:supportsRtl="true"
android:theme="@style/Theme.Map">
<!--
TODO: Before you run your application, you need a Google Maps API key.
To get one, follow the directions here:
https://developers.google.com/maps/documentation/android-sdk/get-api-key
Once you have your API key (it starts with "AIza"), define a new property in your
project's local.properties file (e.g. MAPS_API_KEY=Aiza...), and replace the
"YOUR_API_KEY" string in this file with "${MAPS_API_KEY}".
-->
<meta-data
android:name="com.google.android.geo.API_KEY"
android:value="${MAPS_API_KEY}" />
<activity
android:name=".MapsActivity"
android:exported="true"
android:label="@string/title_activity_maps">
<intent-filter>
<action android:name="android.intent.action.MAIN" />
<category android:name="android.intent.category.LAUNCHER" />
</intent-filter>
</activity>
</application>
</manifest>
MapsActivity.java
package com.example.map;
import androidx.fragment.app.FragmentActivity;import android.os.Bundle;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.example.map.databinding.ActivityMapsBinding;
public class MapsActivity extends FragmentActivity implements OnMapReadyCallback {
private GoogleMap mMap;
private ActivityMapsBinding binding;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
binding = ActivityMapsBinding.inflate(getLayoutInflater());
setContentView(binding.getRoot());
// Obtain the SupportMapFragment and get notified when the map is ready to be used.
SupportMapFragment mapFragment = (SupportMapFragment)
getSupportFragmentManager()
.findFragmentById(R.id.map);
mapFragment.getMapAsync(this);
}
/**
* Manipulates the map once available.
* This callback is triggered when the map is ready to be used.
* This is where we can add markers or lines, add listeners or move the camera. In this case,
* we just add a marker near Sydney, Australia.
* If Google Play services is not installed on the device, the user will be prompted to install
* it inside the SupportMapFragment. This method will only be triggered once the user has
* installed Google Play services and returned to the app.
*/
@Override
public void onMapReady(GoogleMap googleMap) {
mMap = googleMap;
// Add a marker in Sydney and move the camera
LatLng sydney = new LatLng(-34, 151);
mMap.addMarker(new MarkerOptions().position(sydney).title("Marker in Sydney"));
mMap.moveCamera(CameraUpdateFactory.newLatLng(sydney));
}
}
local.properties
## This file is automatically generated by Android Studio.
# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
#
# This file should *NOT* be checked into Version Control Systems,# as it contains information specific to your local configuration.
#
# Location of the SDK. This is only used by Gradle.
# For customization when using a Version Control System, please read the
# header note.
sdk.dir=/home/exam/Android/Sdk
MAPS_API_KEY=AIzaSyCuLaKiG-6krVw5zSwD_mh9RDlJj_qnCeU



---------------------------os-----------------

slip 10


Write a C program to display statistics related to memory allocation system. (Use mallinfo() system
call).

#include<stdio.h>
#include<unistd.h>
#include<fcntl.h>
#include<malloc.h>
int main()
{
char *s;
struct mallinfo m;
m=mallinfo();
printf("\nsize of data segment=%d",m.arena);
printf("\nno of free chunk=%d",m.ordblks);
printf("\nno of fast bin=%d",m.smblks);
printf("\nno of anonymous mapping=%d",m.hblks);
printf("\nsize of anonymous mapping=%d",m.hblkhd);
printf("\nmaximum total allocated size=%d",m.usmblks);
printf("\nsize of available fastbin=%d",m.fsmblks);
printf("\nsize of total allocated space=%d",m.uordblks);
printf("\nsize of available chunks=%d",m.fordblks);
printf("\nsize of trimmable space=%d",m.keepcost);
s=(char*)malloc(sizeof(char)*1000);
munmap(0,500);
m=mallinfo();
printf("\nsize of data segment=%d",m.arena);
printf("\nno of free chunk=%d",m.ordblks);
printf("\nno of fast bin=%d",m.smblks);
printf("\nno of anonymous mapping=%d",m.hblks);
printf("\nsize of anonymous mapping=%d",m.hblkhd);
printf("\nmaximum total allocated size=%d",m.usmblks);
printf("\nsize of available fastbin=%d",m.fsmblks);
printf("\nsize of total allocated space=%d",m.uordblks);
printf("\nsize of available chunks=%d",m.fordblks);
printf("\nsize of trimmable space=%d",m.keepcost);
return 0;
}

compile and run

Write a C program which creates two files. The first file should have read and write
permission to owner, group of owner and other users whereas second file has read and write
permission to owner(use umask() function). Now turn on group-id and turn off group execute
permission of first file. Set the read permission to all user for second file (use chmod() function).


#include<sys/stat.h>
#include<fcntl.h>
#include<stdio.h>
#include<sys/types.h>
#include<stdlib.h>
#include<string.h>
int main()
{
        umask(0);
        if(creat("file1",S_IRUSR|S_IWUSR|S_IWGRP|S_IROTH|S_IWOTH))
                printf("create file1");
        umask(S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH);
        if(creat("file2",S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH))
                printf("\ncreate file2");
        struct stat s;
        if(stat("file1" ,&s)<0)
                printf("\n stat error file1");
        if(chmod("file1",(s.st_mode & ~S_IXGRP)|S_ISGID)<0)
                printf("\n chmod error file 1");
        if(chmod("file2",S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH)<0)
                printf("\n chmod error file 2");
return 0;
}

compile and run
stat file1.c



